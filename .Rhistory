## Date Created: 2020-11-14
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# relevant files
model_file <- file.path(src_folder, "PredictionModel.rds")
# load functions
source(file.path(src_folder, "functions.R"))
# set date for which to predict games
this_day <- Sys.Date() - 365
this_season <- 2020 # indicates 2019-20 season
# ============================ GET NEW DATA ============================== #
game_ids <- game_logs(seasons = this_season, result_types = "team", season_types = "Regular Season") %>%
filter(dateGame <= this_day, dateGame >= this_day - 45) %>%
select(idGame) %>%
unique()
# transform a series of Game IDs into modeling dataste
new_games <- prep_features(game_ids, this_season) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
new_games %>% View()
)
# predict on new data set
predictions <- readRDS(model_file) %>%
predict(new_games)
# na.omit() %>%
arrange(dateGame) %>%
advanced_stats %>%
advanced_stats %>%
rename(idHTeam = 'idTeam') %>%
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = TRUE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
ungroup() %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'slugTeam', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = 'idGame') %>%
left_join(cat_features) %>%
relocate(c('slugTeam', 'idTeam', 'slugOpponent', 'dateGame'), .before = idGame) %>%
select('slugTeam', 'idTeam', 'slugOpponent', 'dateGame', idGame, ends_with(c("_m3", "_m5")) %>%
rename(idHTeam = 'idTeam') %>%
arrange(dateGame) %>%
# na.omit() %>%
View()
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = TRUE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
ungroup() %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'slugTeam', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = 'idGame') %>%
left_join(cat_features) %>%
relocate(c('slugTeam', 'idTeam', 'slugOpponent', 'dateGame'), .before = idGame) %>%
select('slugTeam', 'idTeam', 'slugOpponent', 'dateGame', idGame, ends_with(c("_m3", "_m5")) %>%
rename(idHTeam = 'idTeam') %>%
arrange(dateGame) %>%
# na.omit() %>%
View()
advanced_stats
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = TRUE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
ungroup()
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = TRUE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
ungroup() %>% View()
num_features <- advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = FALSE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
View()
num_features <- advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = FALSE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
View()
num_features <- advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3),
m3 = rollmean(.,3, na.pad = TRUE), m5 = rollmean(., 5, na.pad = TRUE))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
View()
game_ids
game_ids %>%
rollmean(3)
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3))
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, na.pad = TRUE))
source('~/.active-rstudio-document', echo=TRUE)
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, na.pad = TRUE)) %>%
View()
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, fill = if (na.pad) NA)) %>%
View()
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, fill = if (na.pad) NA, na.pad = FALSE)) %>%
View()
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, fill = NA)) %>%
View()
game_ids %>%
mutate(ma3 = rollmean(game_ids, 3, fill = NA, align = 'right')) %>%
View()
View()
game_ids %>%
mutate(l1 = lag(game_ids, 1))
game_ids %>%
mutate(l1 = lag(game_ids, 1)) %>%
mutate(ma3 = rollmean(l1, 3, fill = NA, align = 'right'), 1) %>%
View()
game_ids %>%
mutate(l1 = lag(game_ids, 1)) %>%
mutate(ma3 = rollmean(l1, 3, align = 'right'), 1) %>%
View()
game_ids %>%
mutate(l1 = lag(game_ids, 1)) %>%
mutate(ma3 = rollmean(l1, 3, fill = NA, align = 'right'), 1) %>%
View()
## ---------------------------
## Purpose of script: make predictions from trained RF model
## Author: Ramzy Al-Amine
## Date Created: 2020-11-14
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# relevant files
model_file <- file.path(src_folder, "PredictionModel.rds")
# load functions
source(file.path(src_folder, "functions.R"))
# set date for which to predict games
this_day <- Sys.Date() - 365
this_season <- 2020 # indicates 2019-20 season
# ============================ GET NEW DATA ============================== #
game_ids <- game_logs(seasons = this_season, result_types = "team", season_types = "Regular Season") %>%
filter(dateGame <= this_day, dateGame >= this_day - 45) %>%
select(idGame) %>%
unique()
# transform a series of Game IDs into modeling dataste
new_games <- prep_features(game_ids, this_season) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
new_games %>% View()
## ---------------------------
## Purpose of script: make predictions from trained RF model
## Author: Ramzy Al-Amine
## Date Created: 2020-11-14
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# relevant files
model_file <- file.path(src_folder, "PredictionModel.rds")
# load functions
source(file.path(src_folder, "functions.R"))
# set date for which to predict games
this_day <- Sys.Date() - 365
this_season <- 2020 # indicates 2019-20 season
# ============================ GET NEW DATA ============================== #
game_ids <- game_logs(seasons = this_season, result_types = "team", season_types = "Regular Season") %>%
filter(dateGame <= this_day, dateGame >= this_day - 45) %>%
select(idGame) %>%
unique()
# transform a series of Game IDs into modeling dataste
new_games <- prep_features(game_ids, this_season) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
new_games %>% View()
num_features <- advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right')))
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right')))
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
View()
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
View()
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate(c('locationGame', 'idTeam'), .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
na.omit()
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame"))
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate('locationGame', .before = idTeam)
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate('locationGame', .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame)
advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate('locationGame', .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
na.omit() %>%
arrange(idGame) %>%
View()
num_features <- advanced_stats %>%
select(where(is.double)) %>%
arrange(idTeam, idGame) %>%
group_by(idTeam) %>%
# compute 3 lags & 2 ma's for every indicator
mutate_at(. , vars(-starts_with("id")),
funs(l1 = lag(., 1), l2 = lag(., 2), l3 = lag(., 3))) %>%
mutate_at(., vars(ends_with("_l1")),
funs(m3 = rollmean(., 3, fill = NA, align = 'right'),
m5 = rollmean(., 5, fill = NA, align = 'right'))) %>%
select(idTeam, idGame, ends_with(c("_l1", "_l2", "_m3", "_m5"))) %>%
ungroup() %>%
select(-starts_with("pctUSG_")) %>%
left_join(game_locations, by = c("idTeam", "idGame")) %>%
relocate('locationGame', .before = idTeam) %>%
pivot_wider(names_from = 'locationGame',
values_from = ends_with(c("_l1", "_l2", "_m3", "_m5")),
id_cols = idGame) %>%
arrange(idGame) %>%
na.omit()
features <- cat_features %>%
rename(idHTeam = 'idTeam') %>%
inner_join(num_features, by = 'idGame') %>%
arrange(dateGame)
features
features %>% View()
## ---------------------------
## Purpose of script: make predictions from trained RF model
## Author: Ramzy Al-Amine
## Date Created: 2020-11-14
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# relevant files
model_file <- file.path(src_folder, "PredictionModel.rds")
# load functions
source(file.path(src_folder, "functions.R"))
# set date for which to predict games
this_day <- Sys.Date() - 365
this_season <- 2020 # indicates 2019-20 season
# ============================ GET NEW DATA ============================== #
game_ids <- game_logs(seasons = this_season, result_types = "team", season_types = "Regular Season") %>%
filter(dateGame <= this_day, dateGame >= this_day - 45) %>%
select(idGame) %>%
unique()
# transform a series of Game IDs into modeling dataste
new_games <- prep_features(game_ids, this_season) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
new_games %>% View()
## ---------------------------
## Purpose of script: make predictions from trained RF model
## Author: Ramzy Al-Amine
## Date Created: 2020-11-14
## Copyright (c) Ramzy Al-Amine, 2020
## ---------------------------
library(tidyverse)
library(nbastatR)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# relevant files
model_file <- file.path(src_folder, "PredictionModel.rds")
# load functions
source(file.path(src_folder, "functions.R"))
# set date for which to predict games
this_day <- Sys.Date() - 365
this_season <- 2020 # indicates 2019-20 season
# ============================ GET NEW DATA ============================== #
game_ids <- game_logs(seasons = this_season, result_types = "team", season_types = "Regular Season") %>%
filter(dateGame <= this_day, dateGame >= this_day - 45) %>%
select(idGame) %>%
unique()
# transform a series of Game IDs into modeling dataste
new_games <- prep_features(game_ids, this_season) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
new_games %>% View()
# predict on new data set
predictions <- readRDS(model_file) %>%
predict(new_games)
probabilities <- readRDS(model_file) %>%
predict(new_games, "prob")
library(nbastatR)
library(tidyverse)
library(tidymodels)
# folder setup
setwd("~/R/nba_forecasting")
data_folder <- "data"
src_folder <- "src"
output_folder <- "output"
# load functions
source('src/functions.R')
# relevant files
modeling_dataset <- file.path(data_folder, "features_2019.csv")
# Alternatively, uncomment below line if need to get data for a new season
# grab_season_data(2019)
save_final_model <- file.path(src_folder, "PredictionModel.rds")
# (option A) load dataset
# df <- read_csv(modeling_dataset) %>%
#   na.omit() %>%
#   mutate_if(is.logical, as.factor) %>%
#   mutate_if(is.character, as.factor)
# # (option B) Alternatively, uncomment below line if need to get data for a new season
df <- grab_season_data(2019, data_folder) %>%
mutate_if(is.logical, as.factor) %>%
mutate_if(is.character, as.factor)
